import { APIError, ErrorMessage } from './APIError';
import { MESSAGES } from './errorMessages';

const throwError = (errorData: ErrorMessage): APIError =>
  new APIError(errorData.status, errorData.message, errorData.title);

export const ERRORS = {
  AUTH: {
    USER_NOT_FOUND: () => throwError(MESSAGES.AUTH_USER_NOT_FOUND),
    CREDENTIALS_INVALID: () => throwError(MESSAGES.AUTH_CREDENTIALS_INVALID),
    ACCESS_TOKEN_INVALID: () => throwError(MESSAGES.AUTH_ACCESS_TOKEN_INVALID),
    ACCESS_TOKEN_NOT_PROVIDED: () =>
      throwError(MESSAGES.AUTH_TOKEN_NOT_PROVIDED),
    ACCESS_TOKEN_EXPIRED: () => throwError(MESSAGES.AUTH_ACCESS_TOKEN_EXPIRED),
    REGISTRATION_FAILED: () => throwError(MESSAGES.AUTH_REGISTRATION_FAILED),
    REFRESH_TOKEN_INVALID: () =>
      throwError(MESSAGES.AUTH_REFRESH_TOKEN_INVALID),
    REFRESH_TOKEN_EXPIRED: () =>
      throwError(MESSAGES.AUTH_REFRESH_TOKEN_EXPIRED),
    USERNAME_EXISTS: () => throwError(MESSAGES.AUTH_USERNAME_EXISTS),
    EMAIL_EXISTS: () => throwError(MESSAGES.AUTH_EMAIL_EXISTS),
  },
  USER: {
    ALREADY_EXISTS: () => throwError(MESSAGES.USER_ALREADY_EXISTS),
    NOT_FOUND: () => throwError(MESSAGES.USER_NOT_FOUND),
    FORBIDDEN_ACTION: () => throwError(MESSAGES.USER_FORBIDDEN_ACTION),
    PASSWORD_MISSING: () => throwError(MESSAGES.USER_PASSWORD_MISSING),
    USERNAME_MISSING: () => throwError(MESSAGES.USER_USERNAME_MISSING),
  },
  SESSION: {
    NOT_FOUND: () => throwError(MESSAGES.SESSION_NOT_FOUND),
  },
};
